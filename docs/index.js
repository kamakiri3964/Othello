(()=>{var e,t,n,r,i,o,s,l={431:function(e,t,n){var r;!function(i){"use strict";var o,s=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,l=Math.ceil,c=Math.floor,u="[BigNumber Error] ",a=u+"Number primitive has more than 15 significant digits: ",f=1e14,h=14,p=9007199254740991,d=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],y=1e7,g=1e9;function b(e){var t=0|e;return e>0||e===t?t:t-1}function _(e){for(var t,n,r=1,i=e.length,o=e[0]+"";r<i;){for(t=e[r++]+"",n=h-t.length;n--;t="0"+t);o+=t}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function m(e,t){var n,r,i=e.c,o=t.c,s=e.s,l=t.s,c=e.e,u=t.e;if(!s||!l)return null;if(n=i&&!i[0],r=o&&!o[0],n||r)return n?r?0:-l:s;if(s!=l)return s;if(n=s<0,r=c==u,!i||!o)return r?0:!i^n?1:-1;if(!r)return c>u^n?1:-1;for(l=(c=i.length)<(u=o.length)?c:u,s=0;s<l;s++)if(i[s]!=o[s])return i[s]>o[s]^n?1:-1;return c==u?0:c>u^n?1:-1}function w(e,t,n,r){if(e<t||e>n||e!==c(e))throw Error(u+(r||"Argument")+("number"==typeof e?e<t||e>n?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function v(e){var t=e.c.length-1;return b(e.e/h)==t&&e.c[t]%2!=0}function A(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function E(e,t,n){var r,i;if(t<0){for(i=n+".";++t;i+=n);e=i+e}else if(++t>(r=e.length)){for(i=n,t-=r;--t;i+=n);e+=i}else t<r&&(e=e.slice(0,t)+"."+e.slice(t));return e}(o=function e(t){var n,r,i,o,k,x,I,O,N,S,B=q.prototype={constructor:q,toString:null,valueOf:null},P=new q(1),j=20,T=4,C=-7,L=21,M=-1e7,R=1e7,F=!1,D=1,U=0,G={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"Â ",suffix:""},$="0123456789abcdefghijklmnopqrstuvwxyz";function q(e,t){var n,o,l,u,f,d,y,g,b=this;if(!(b instanceof q))return new q(e,t);if(null==t){if(e&&!0===e._isBigNumber)return b.s=e.s,void(!e.c||e.e>R?b.c=b.e=null:e.e<M?b.c=[b.e=0]:(b.e=e.e,b.c=e.c.slice()));if((d="number"==typeof e)&&0*e==0){if(b.s=1/e<0?(e=-e,-1):1,e===~~e){for(u=0,f=e;f>=10;f/=10,u++);return void(u>R?b.c=b.e=null:(b.e=u,b.c=[e]))}g=String(e)}else{if(!s.test(g=String(e)))return i(b,g,d);b.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(u=g.indexOf("."))>-1&&(g=g.replace(".","")),(f=g.search(/e/i))>0?(u<0&&(u=f),u+=+g.slice(f+1),g=g.substring(0,f)):u<0&&(u=g.length)}else{if(w(t,2,$.length,"Base"),10==t)return V(b=new q(e),j+b.e+1,T);if(g=String(e),d="number"==typeof e){if(0*e!=0)return i(b,g,d,t);if(b.s=1/e<0?(g=g.slice(1),-1):1,q.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(a+e)}else b.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(n=$.slice(0,t),u=f=0,y=g.length;f<y;f++)if(n.indexOf(o=g.charAt(f))<0){if("."==o){if(f>u){u=y;continue}}else if(!l&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){l=!0,f=-1,u=0;continue}return i(b,String(e),d,t)}d=!1,(u=(g=r(g,t,10,b.s)).indexOf("."))>-1?g=g.replace(".",""):u=g.length}for(f=0;48===g.charCodeAt(f);f++);for(y=g.length;48===g.charCodeAt(--y););if(g=g.slice(f,++y)){if(y-=f,d&&q.DEBUG&&y>15&&(e>p||e!==c(e)))throw Error(a+b.s*e);if((u=u-f-1)>R)b.c=b.e=null;else if(u<M)b.c=[b.e=0];else{if(b.e=u,b.c=[],f=(u+1)%h,u<0&&(f+=h),f<y){for(f&&b.c.push(+g.slice(0,f)),y-=h;f<y;)b.c.push(+g.slice(f,f+=h));f=h-(g=g.slice(f)).length}else f-=y;for(;f--;g+="0");b.c.push(+g)}}else b.c=[b.e=0]}function W(e,t,n,r){var i,o,s,l,c;if(null==n?n=T:w(n,0,8),!e.c)return e.toString();if(i=e.c[0],s=e.e,null==t)c=_(e.c),c=1==r||2==r&&(s<=C||s>=L)?A(c,s):E(c,s,"0");else if(o=(e=V(new q(e),t,n)).e,l=(c=_(e.c)).length,1==r||2==r&&(t<=o||o<=C)){for(;l<t;c+="0",l++);c=A(c,o)}else if(t-=s,c=E(c,o,"0"),o+1>l){if(--t>0)for(c+=".";t--;c+="0");}else if((t+=o-l)>0)for(o+1==l&&(c+=".");t--;c+="0");return e.s<0&&i?"-"+c:c}function z(e,t){for(var n,r=1,i=new q(e[0]);r<e.length;r++){if(!(n=new q(e[r])).s){i=n;break}t.call(i,n)&&(i=n)}return i}function H(e,t,n){for(var r=1,i=t.length;!t[--i];t.pop());for(i=t[0];i>=10;i/=10,r++);return(n=r+n*h-1)>R?e.c=e.e=null:n<M?e.c=[e.e=0]:(e.e=n,e.c=t),e}function V(e,t,n,r){var i,o,s,u,a,p,y,g=e.c,b=d;if(g){e:{for(i=1,u=g[0];u>=10;u/=10,i++);if((o=t-i)<0)o+=h,s=t,y=(a=g[p=0])/b[i-s-1]%10|0;else if((p=l((o+1)/h))>=g.length){if(!r)break e;for(;g.length<=p;g.push(0));a=y=0,i=1,s=(o%=h)-h+1}else{for(a=u=g[p],i=1;u>=10;u/=10,i++);y=(s=(o%=h)-h+i)<0?0:a/b[i-s-1]%10|0}if(r=r||t<0||null!=g[p+1]||(s<0?a:a%b[i-s-1]),r=n<4?(y||r)&&(0==n||n==(e.s<0?3:2)):y>5||5==y&&(4==n||r||6==n&&(o>0?s>0?a/b[i-s]:0:g[p-1])%10&1||n==(e.s<0?8:7)),t<1||!g[0])return g.length=0,r?(t-=e.e+1,g[0]=b[(h-t%h)%h],e.e=-t||0):g[0]=e.e=0,e;if(0==o?(g.length=p,u=1,p--):(g.length=p+1,u=b[h-o],g[p]=s>0?c(a/b[i-s]%b[s])*u:0),r)for(;;){if(0==p){for(o=1,s=g[0];s>=10;s/=10,o++);for(s=g[0]+=u,u=1;s>=10;s/=10,u++);o!=u&&(e.e++,g[0]==f&&(g[0]=1));break}if(g[p]+=u,g[p]!=f)break;g[p--]=0,u=1}for(o=g.length;0===g[--o];g.pop());}e.e>R?e.c=e.e=null:e.e<M&&(e.c=[e.e=0])}return e}function J(e){var t,n=e.e;return null===n?e.toString():(t=_(e.c),t=n<=C||n>=L?A(t,n):E(t,n,"0"),e.s<0?"-"+t:t)}return q.clone=e,q.ROUND_UP=0,q.ROUND_DOWN=1,q.ROUND_CEIL=2,q.ROUND_FLOOR=3,q.ROUND_HALF_UP=4,q.ROUND_HALF_DOWN=5,q.ROUND_HALF_EVEN=6,q.ROUND_HALF_CEIL=7,q.ROUND_HALF_FLOOR=8,q.EUCLID=9,q.config=q.set=function(e){var t,n;if(null!=e){if("object"!=typeof e)throw Error(u+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(w(n=e[t],0,g,t),j=n),e.hasOwnProperty(t="ROUNDING_MODE")&&(w(n=e[t],0,8,t),T=n),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((n=e[t])&&n.pop?(w(n[0],-g,0,t),w(n[1],0,g,t),C=n[0],L=n[1]):(w(n,-g,g,t),C=-(L=n<0?-n:n))),e.hasOwnProperty(t="RANGE"))if((n=e[t])&&n.pop)w(n[0],-g,-1,t),w(n[1],1,g,t),M=n[0],R=n[1];else{if(w(n,-g,g,t),!n)throw Error(u+t+" cannot be zero: "+n);M=-(R=n<0?-n:n)}if(e.hasOwnProperty(t="CRYPTO")){if((n=e[t])!==!!n)throw Error(u+t+" not true or false: "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw F=!n,Error(u+"crypto unavailable");F=n}else F=n}if(e.hasOwnProperty(t="MODULO_MODE")&&(w(n=e[t],0,9,t),D=n),e.hasOwnProperty(t="POW_PRECISION")&&(w(n=e[t],0,g,t),U=n),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(n=e[t]))throw Error(u+t+" not an object: "+n);G=n}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(n=e[t])||/^.?$|[+\-.\s]|(.).*\1/.test(n))throw Error(u+t+" invalid: "+n);$=n}}return{DECIMAL_PLACES:j,ROUNDING_MODE:T,EXPONENTIAL_AT:[C,L],RANGE:[M,R],CRYPTO:F,MODULO_MODE:D,POW_PRECISION:U,FORMAT:G,ALPHABET:$}},q.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!q.DEBUG)return!0;var t,n,r=e.c,i=e.e,o=e.s;e:if("[object Array]"=={}.toString.call(r)){if((1===o||-1===o)&&i>=-g&&i<=g&&i===c(i)){if(0===r[0]){if(0===i&&1===r.length)return!0;break e}if((t=(i+1)%h)<1&&(t+=h),String(r[0]).length==t){for(t=0;t<r.length;t++)if((n=r[t])<0||n>=f||n!==c(n))break e;if(0!==n)return!0}}}else if(null===r&&null===i&&(null===o||1===o||-1===o))return!0;throw Error(u+"Invalid BigNumber: "+e)},q.maximum=q.max=function(){return z(arguments,B.lt)},q.minimum=q.min=function(){return z(arguments,B.gt)},q.random=(o=9007199254740992,k=Math.random()*o&2097151?function(){return c(Math.random()*o)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,n,r,i,o,s=0,a=[],f=new q(P);if(null==e?e=j:w(e,0,g),i=l(e/h),F)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(i*=2));s<i;)(o=131072*t[s]+(t[s+1]>>>11))>=9e15?(n=crypto.getRandomValues(new Uint32Array(2)),t[s]=n[0],t[s+1]=n[1]):(a.push(o%1e14),s+=2);s=i/2}else{if(!crypto.randomBytes)throw F=!1,Error(u+"crypto unavailable");for(t=crypto.randomBytes(i*=7);s<i;)(o=281474976710656*(31&t[s])+1099511627776*t[s+1]+4294967296*t[s+2]+16777216*t[s+3]+(t[s+4]<<16)+(t[s+5]<<8)+t[s+6])>=9e15?crypto.randomBytes(7).copy(t,s):(a.push(o%1e14),s+=7);s=i/7}if(!F)for(;s<i;)(o=k())<9e15&&(a[s++]=o%1e14);for(i=a[--s],e%=h,i&&e&&(o=d[h-e],a[s]=c(i/o)*o);0===a[s];a.pop(),s--);if(s<0)a=[r=0];else{for(r=-1;0===a[0];a.splice(0,1),r-=h);for(s=1,o=a[0];o>=10;o/=10,s++);s<h&&(r-=h-s)}return f.e=r,f.c=a,f}),q.sum=function(){for(var e=1,t=arguments,n=new q(t[0]);e<t.length;)n=n.plus(t[e++]);return n},r=function(){var e="0123456789";function t(e,t,n,r){for(var i,o,s=[0],l=0,c=e.length;l<c;){for(o=s.length;o--;s[o]*=t);for(s[0]+=r.indexOf(e.charAt(l++)),i=0;i<s.length;i++)s[i]>n-1&&(null==s[i+1]&&(s[i+1]=0),s[i+1]+=s[i]/n|0,s[i]%=n)}return s.reverse()}return function(r,i,o,s,l){var c,u,a,f,h,p,d,y,g=r.indexOf("."),b=j,m=T;for(g>=0&&(f=U,U=0,r=r.replace(".",""),p=(y=new q(i)).pow(r.length-g),U=f,y.c=t(E(_(p.c),p.e,"0"),10,o,e),y.e=y.c.length),a=f=(d=t(r,i,o,l?(c=$,e):(c=e,$))).length;0==d[--f];d.pop());if(!d[0])return c.charAt(0);if(g<0?--a:(p.c=d,p.e=a,p.s=s,d=(p=n(p,y,b,m,o)).c,h=p.r,a=p.e),g=d[u=a+b+1],f=o/2,h=h||u<0||null!=d[u+1],h=m<4?(null!=g||h)&&(0==m||m==(p.s<0?3:2)):g>f||g==f&&(4==m||h||6==m&&1&d[u-1]||m==(p.s<0?8:7)),u<1||!d[0])r=h?E(c.charAt(1),-b,c.charAt(0)):c.charAt(0);else{if(d.length=u,h)for(--o;++d[--u]>o;)d[u]=0,u||(++a,d=[1].concat(d));for(f=d.length;!d[--f];);for(g=0,r="";g<=f;r+=c.charAt(d[g++]));r=E(r,a,c.charAt(0))}return r}}(),n=function(){function e(e,t,n){var r,i,o,s,l=0,c=e.length,u=t%y,a=t/y|0;for(e=e.slice();c--;)l=((i=u*(o=e[c]%y)+(r=a*o+(s=e[c]/y|0)*u)%y*y+l)/n|0)+(r/y|0)+a*s,e[c]=i%n;return l&&(e=[l].concat(e)),e}function t(e,t,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(e[i]!=t[i]){o=e[i]>t[i]?1:-1;break}return o}function n(e,t,n,r){for(var i=0;n--;)e[n]-=i,i=e[n]<t[n]?1:0,e[n]=i*r+e[n]-t[n];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(r,i,o,s,l){var u,a,p,d,y,g,_,m,w,v,A,E,k,x,I,O,N,S=r.s==i.s?1:-1,B=r.c,P=i.c;if(!(B&&B[0]&&P&&P[0]))return new q(r.s&&i.s&&(B?!P||B[0]!=P[0]:P)?B&&0==B[0]||!P?0*S:S/0:NaN);for(w=(m=new q(S)).c=[],S=o+(a=r.e-i.e)+1,l||(l=f,a=b(r.e/h)-b(i.e/h),S=S/h|0),p=0;P[p]==(B[p]||0);p++);if(P[p]>(B[p]||0)&&a--,S<0)w.push(1),d=!0;else{for(x=B.length,O=P.length,p=0,S+=2,(y=c(l/(P[0]+1)))>1&&(P=e(P,y,l),B=e(B,y,l),O=P.length,x=B.length),k=O,A=(v=B.slice(0,O)).length;A<O;v[A++]=0);N=P.slice(),N=[0].concat(N),I=P[0],P[1]>=l/2&&I++;do{if(y=0,(u=t(P,v,O,A))<0){if(E=v[0],O!=A&&(E=E*l+(v[1]||0)),(y=c(E/I))>1)for(y>=l&&(y=l-1),_=(g=e(P,y,l)).length,A=v.length;1==t(g,v,_,A);)y--,n(g,O<_?N:P,_,l),_=g.length,u=1;else 0==y&&(u=y=1),_=(g=P.slice()).length;if(_<A&&(g=[0].concat(g)),n(v,g,A,l),A=v.length,-1==u)for(;t(P,v,O,A)<1;)y++,n(v,O<A?N:P,A,l),A=v.length}else 0===u&&(y++,v=[0]);w[p++]=y,v[0]?v[A++]=B[k]||0:(v=[B[k]],A=1)}while((k++<x||null!=v[0])&&S--);d=null!=v[0],w[0]||w.splice(0,1)}if(l==f){for(p=1,S=w[0];S>=10;S/=10,p++);V(m,o+(m.e=p+a*h-1)+1,s,d)}else m.e=a,m.r=+d;return m}}(),x=/^(-?)0([xbo])(?=\w[\w.]*$)/i,I=/^([^.]+)\.$/,O=/^\.([^.]+)$/,N=/^-?(Infinity|NaN)$/,S=/^\s*\+(?=[\w.])|^\s+|\s+$/g,i=function(e,t,n,r){var i,o=n?t:t.replace(S,"");if(N.test(o))e.s=isNaN(o)?null:o<0?-1:1;else{if(!n&&(o=o.replace(x,(function(e,t,n){return i="x"==(n=n.toLowerCase())?16:"b"==n?2:8,r&&r!=i?e:t})),r&&(i=r,o=o.replace(I,"$1").replace(O,"0.$1")),t!=o))return new q(o,i);if(q.DEBUG)throw Error(u+"Not a"+(r?" base "+r:"")+" number: "+t);e.s=null}e.c=e.e=null},B.absoluteValue=B.abs=function(){var e=new q(this);return e.s<0&&(e.s=1),e},B.comparedTo=function(e,t){return m(this,new q(e,t))},B.decimalPlaces=B.dp=function(e,t){var n,r,i,o=this;if(null!=e)return w(e,0,g),null==t?t=T:w(t,0,8),V(new q(o),e+o.e+1,t);if(!(n=o.c))return null;if(r=((i=n.length-1)-b(this.e/h))*h,i=n[i])for(;i%10==0;i/=10,r--);return r<0&&(r=0),r},B.dividedBy=B.div=function(e,t){return n(this,new q(e,t),j,T)},B.dividedToIntegerBy=B.idiv=function(e,t){return n(this,new q(e,t),0,1)},B.exponentiatedBy=B.pow=function(e,t){var n,r,i,o,s,a,f,p,d=this;if((e=new q(e)).c&&!e.isInteger())throw Error(u+"Exponent not an integer: "+J(e));if(null!=t&&(t=new q(t)),s=e.e>14,!d.c||!d.c[0]||1==d.c[0]&&!d.e&&1==d.c.length||!e.c||!e.c[0])return p=new q(Math.pow(+J(d),s?2-v(e):+J(e))),t?p.mod(t):p;if(a=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new q(NaN);(r=!a&&d.isInteger()&&t.isInteger())&&(d=d.mod(t))}else{if(e.e>9&&(d.e>0||d.e<-1||(0==d.e?d.c[0]>1||s&&d.c[1]>=24e7:d.c[0]<8e13||s&&d.c[0]<=9999975e7)))return o=d.s<0&&v(e)?-0:0,d.e>-1&&(o=1/o),new q(a?1/o:o);U&&(o=l(U/h+2))}for(s?(n=new q(.5),a&&(e.s=1),f=v(e)):f=(i=Math.abs(+J(e)))%2,p=new q(P);;){if(f){if(!(p=p.times(d)).c)break;o?p.c.length>o&&(p.c.length=o):r&&(p=p.mod(t))}if(i){if(0===(i=c(i/2)))break;f=i%2}else if(V(e=e.times(n),e.e+1,1),e.e>14)f=v(e);else{if(0==(i=+J(e)))break;f=i%2}d=d.times(d),o?d.c&&d.c.length>o&&(d.c.length=o):r&&(d=d.mod(t))}return r?p:(a&&(p=P.div(p)),t?p.mod(t):o?V(p,U,T,void 0):p)},B.integerValue=function(e){var t=new q(this);return null==e?e=T:w(e,0,8),V(t,t.e+1,e)},B.isEqualTo=B.eq=function(e,t){return 0===m(this,new q(e,t))},B.isFinite=function(){return!!this.c},B.isGreaterThan=B.gt=function(e,t){return m(this,new q(e,t))>0},B.isGreaterThanOrEqualTo=B.gte=function(e,t){return 1===(t=m(this,new q(e,t)))||0===t},B.isInteger=function(){return!!this.c&&b(this.e/h)>this.c.length-2},B.isLessThan=B.lt=function(e,t){return m(this,new q(e,t))<0},B.isLessThanOrEqualTo=B.lte=function(e,t){return-1===(t=m(this,new q(e,t)))||0===t},B.isNaN=function(){return!this.s},B.isNegative=function(){return this.s<0},B.isPositive=function(){return this.s>0},B.isZero=function(){return!!this.c&&0==this.c[0]},B.minus=function(e,t){var n,r,i,o,s=this,l=s.s;if(t=(e=new q(e,t)).s,!l||!t)return new q(NaN);if(l!=t)return e.s=-t,s.plus(e);var c=s.e/h,u=e.e/h,a=s.c,p=e.c;if(!c||!u){if(!a||!p)return a?(e.s=-t,e):new q(p?s:NaN);if(!a[0]||!p[0])return p[0]?(e.s=-t,e):new q(a[0]?s:3==T?-0:0)}if(c=b(c),u=b(u),a=a.slice(),l=c-u){for((o=l<0)?(l=-l,i=a):(u=c,i=p),i.reverse(),t=l;t--;i.push(0));i.reverse()}else for(r=(o=(l=a.length)<(t=p.length))?l:t,l=t=0;t<r;t++)if(a[t]!=p[t]){o=a[t]<p[t];break}if(o&&(i=a,a=p,p=i,e.s=-e.s),(t=(r=p.length)-(n=a.length))>0)for(;t--;a[n++]=0);for(t=f-1;r>l;){if(a[--r]<p[r]){for(n=r;n&&!a[--n];a[n]=t);--a[n],a[r]+=f}a[r]-=p[r]}for(;0==a[0];a.splice(0,1),--u);return a[0]?H(e,a,u):(e.s=3==T?-1:1,e.c=[e.e=0],e)},B.modulo=B.mod=function(e,t){var r,i,o=this;return e=new q(e,t),!o.c||!e.s||e.c&&!e.c[0]?new q(NaN):!e.c||o.c&&!o.c[0]?new q(o):(9==D?(i=e.s,e.s=1,r=n(o,e,0,3),e.s=i,r.s*=i):r=n(o,e,0,D),(e=o.minus(r.times(e))).c[0]||1!=D||(e.s=o.s),e)},B.multipliedBy=B.times=function(e,t){var n,r,i,o,s,l,c,u,a,p,d,g,_,m,w,v=this,A=v.c,E=(e=new q(e,t)).c;if(!(A&&E&&A[0]&&E[0]))return!v.s||!e.s||A&&!A[0]&&!E||E&&!E[0]&&!A?e.c=e.e=e.s=null:(e.s*=v.s,A&&E?(e.c=[0],e.e=0):e.c=e.e=null),e;for(r=b(v.e/h)+b(e.e/h),e.s*=v.s,(c=A.length)<(p=E.length)&&(_=A,A=E,E=_,i=c,c=p,p=i),i=c+p,_=[];i--;_.push(0));for(m=f,w=y,i=p;--i>=0;){for(n=0,d=E[i]%w,g=E[i]/w|0,o=i+(s=c);o>i;)n=((u=d*(u=A[--s]%w)+(l=g*u+(a=A[s]/w|0)*d)%w*w+_[o]+n)/m|0)+(l/w|0)+g*a,_[o--]=u%m;_[o]=n}return n?++r:_.splice(0,1),H(e,_,r)},B.negated=function(){var e=new q(this);return e.s=-e.s||null,e},B.plus=function(e,t){var n,r=this,i=r.s;if(t=(e=new q(e,t)).s,!i||!t)return new q(NaN);if(i!=t)return e.s=-t,r.minus(e);var o=r.e/h,s=e.e/h,l=r.c,c=e.c;if(!o||!s){if(!l||!c)return new q(i/0);if(!l[0]||!c[0])return c[0]?e:new q(l[0]?r:0*i)}if(o=b(o),s=b(s),l=l.slice(),i=o-s){for(i>0?(s=o,n=c):(i=-i,n=l),n.reverse();i--;n.push(0));n.reverse()}for((i=l.length)-(t=c.length)<0&&(n=c,c=l,l=n,t=i),i=0;t;)i=(l[--t]=l[t]+c[t]+i)/f|0,l[t]=f===l[t]?0:l[t]%f;return i&&(l=[i].concat(l),++s),H(e,l,s)},B.precision=B.sd=function(e,t){var n,r,i,o=this;if(null!=e&&e!==!!e)return w(e,1,g),null==t?t=T:w(t,0,8),V(new q(o),e,t);if(!(n=o.c))return null;if(r=(i=n.length-1)*h+1,i=n[i]){for(;i%10==0;i/=10,r--);for(i=n[0];i>=10;i/=10,r++);}return e&&o.e+1>r&&(r=o.e+1),r},B.shiftedBy=function(e){return w(e,-9007199254740991,p),this.times("1e"+e)},B.squareRoot=B.sqrt=function(){var e,t,r,i,o,s=this,l=s.c,c=s.s,u=s.e,a=j+4,f=new q("0.5");if(1!==c||!l||!l[0])return new q(!c||c<0&&(!l||l[0])?NaN:l?s:1/0);if(0==(c=Math.sqrt(+J(s)))||c==1/0?(((t=_(l)).length+u)%2==0&&(t+="0"),c=Math.sqrt(+t),u=b((u+1)/2)-(u<0||u%2),r=new q(t=c==1/0?"5e"+u:(t=c.toExponential()).slice(0,t.indexOf("e")+1)+u)):r=new q(c+""),r.c[0])for((c=(u=r.e)+a)<3&&(c=0);;)if(o=r,r=f.times(o.plus(n(s,o,a,1))),_(o.c).slice(0,c)===(t=_(r.c)).slice(0,c)){if(r.e<u&&--c,"9999"!=(t=t.slice(c-3,c+1))&&(i||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(V(r,r.e+j+2,1),e=!r.times(r).eq(s));break}if(!i&&(V(o,o.e+j+2,0),o.times(o).eq(s))){r=o;break}a+=4,c+=4,i=1}return V(r,r.e+j+1,T,e)},B.toExponential=function(e,t){return null!=e&&(w(e,0,g),e++),W(this,e,t,1)},B.toFixed=function(e,t){return null!=e&&(w(e,0,g),e=e+this.e+1),W(this,e,t)},B.toFormat=function(e,t,n){var r,i=this;if(null==n)null!=e&&t&&"object"==typeof t?(n=t,t=null):e&&"object"==typeof e?(n=e,e=t=null):n=G;else if("object"!=typeof n)throw Error(u+"Argument not an object: "+n);if(r=i.toFixed(e,t),i.c){var o,s=r.split("."),l=+n.groupSize,c=+n.secondaryGroupSize,a=n.groupSeparator||"",f=s[0],h=s[1],p=i.s<0,d=p?f.slice(1):f,y=d.length;if(c&&(o=l,l=c,c=o,y-=o),l>0&&y>0){for(o=y%l||l,f=d.substr(0,o);o<y;o+=l)f+=a+d.substr(o,l);c>0&&(f+=a+d.slice(o)),p&&(f="-"+f)}r=h?f+(n.decimalSeparator||"")+((c=+n.fractionGroupSize)?h.replace(new RegExp("\\d{"+c+"}\\B","g"),"$&"+(n.fractionGroupSeparator||"")):h):f}return(n.prefix||"")+r+(n.suffix||"")},B.toFraction=function(e){var t,r,i,o,s,l,c,a,f,p,y,g,b=this,m=b.c;if(null!=e&&(!(c=new q(e)).isInteger()&&(c.c||1!==c.s)||c.lt(P)))throw Error(u+"Argument "+(c.isInteger()?"out of range: ":"not an integer: ")+J(c));if(!m)return new q(b);for(t=new q(P),f=r=new q(P),i=a=new q(P),g=_(m),s=t.e=g.length-b.e-1,t.c[0]=d[(l=s%h)<0?h+l:l],e=!e||c.comparedTo(t)>0?s>0?t:f:c,l=R,R=1/0,c=new q(g),a.c[0]=0;p=n(c,t,0,1),1!=(o=r.plus(p.times(i))).comparedTo(e);)r=i,i=o,f=a.plus(p.times(o=f)),a=o,t=c.minus(p.times(o=t)),c=o;return o=n(e.minus(r),i,0,1),a=a.plus(o.times(f)),r=r.plus(o.times(i)),a.s=f.s=b.s,y=n(f,i,s*=2,T).minus(b).abs().comparedTo(n(a,r,s,T).minus(b).abs())<1?[f,i]:[a,r],R=l,y},B.toNumber=function(){return+J(this)},B.toPrecision=function(e,t){return null!=e&&w(e,1,g),W(this,e,t,2)},B.toString=function(e){var t,n=this,i=n.s,o=n.e;return null===o?i?(t="Infinity",i<0&&(t="-"+t)):t="NaN":(null==e?t=o<=C||o>=L?A(_(n.c),o):E(_(n.c),o,"0"):10===e?t=E(_((n=V(new q(n),j+o+1,T)).c),n.e,"0"):(w(e,2,$.length,"Base"),t=r(E(_(n.c),o,"0"),10,e,i,!0)),i<0&&n.c[0]&&(t="-"+t)),t},B.valueOf=B.toJSON=function(){return J(this)},B._isBigNumber=!0,null!=t&&q.set(t),q}()).default=o.BigNumber=o,void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)}()},400:(e,t,n)=>{var r=n(123).stringify,i=n(813);e.exports=function(e){return{parse:i(e),stringify:r}},e.exports.parse=i(),e.exports.stringify=r},813:(e,t,n)=>{var r=null;const i=/(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/,o=/(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;e.exports=function(e){"use strict";var t={strict:!1,storeAsString:!1,alwaysParseAsBig:!1,useNativeBigInt:!1,protoAction:"error",constructorAction:"error"};if(null!=e){if(!0===e.strict&&(t.strict=!0),!0===e.storeAsString&&(t.storeAsString=!0),t.alwaysParseAsBig=!0===e.alwaysParseAsBig&&e.alwaysParseAsBig,t.useNativeBigInt=!0===e.useNativeBigInt&&e.useNativeBigInt,void 0!==e.constructorAction){if("error"!==e.constructorAction&&"ignore"!==e.constructorAction&&"preserve"!==e.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${e.constructorAction}`);t.constructorAction=e.constructorAction}if(void 0!==e.protoAction){if("error"!==e.protoAction&&"ignore"!==e.protoAction&&"preserve"!==e.protoAction)throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${e.protoAction}`);t.protoAction=e.protoAction}}var s,l,c,u,a={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},f=function(e){throw{name:"SyntaxError",message:e,at:s,text:c}},h=function(e){return e&&e!==l&&f("Expected '"+e+"' instead of '"+l+"'"),l=c.charAt(s),s+=1,l},p=function(){var e,i="";for("-"===l&&(i="-",h("-"));l>="0"&&l<="9";)i+=l,h();if("."===l)for(i+=".";h()&&l>="0"&&l<="9";)i+=l;if("e"===l||"E"===l)for(i+=l,h(),"-"!==l&&"+"!==l||(i+=l,h());l>="0"&&l<="9";)i+=l,h();if(e=+i,isFinite(e))return null==r&&(r=n(431)),i.length>15?t.storeAsString?i:t.useNativeBigInt?BigInt(i):new r(i):t.alwaysParseAsBig?t.useNativeBigInt?BigInt(e):new r(e):e;f("Bad number")},d=function(){var e,t,n,r="";if('"'===l)for(var i=s;h();){if('"'===l)return s-1>i&&(r+=c.substring(i,s-1)),h(),r;if("\\"===l){if(s-1>i&&(r+=c.substring(i,s-1)),h(),"u"===l){for(n=0,t=0;t<4&&(e=parseInt(h(),16),isFinite(e));t+=1)n=16*n+e;r+=String.fromCharCode(n)}else{if("string"!=typeof a[l])break;r+=a[l]}i=s}}f("Bad string")},y=function(){for(;l&&l<=" ";)h()};return u=function(){switch(y(),l){case"{":return function(){var e,n=Object.create(null);if("{"===l){if(h("{"),y(),"}"===l)return h("}"),n;for(;l;){if(e=d(),y(),h(":"),!0===t.strict&&Object.hasOwnProperty.call(n,e)&&f('Duplicate key "'+e+'"'),!0===i.test(e)?"error"===t.protoAction?f("Object contains forbidden prototype property"):"ignore"===t.protoAction?u():n[e]=u():!0===o.test(e)?"error"===t.constructorAction?f("Object contains forbidden constructor property"):"ignore"===t.constructorAction?u():n[e]=u():n[e]=u(),y(),"}"===l)return h("}"),n;h(","),y()}}f("Bad object")}();case"[":return function(){var e=[];if("["===l){if(h("["),y(),"]"===l)return h("]"),e;for(;l;){if(e.push(u()),y(),"]"===l)return h("]"),e;h(","),y()}}f("Bad array")}();case'"':return d();case"-":return p();default:return l>="0"&&l<="9"?p():function(){switch(l){case"t":return h("t"),h("r"),h("u"),h("e"),!0;case"f":return h("f"),h("a"),h("l"),h("s"),h("e"),!1;case"n":return h("n"),h("u"),h("l"),h("l"),null}f("Unexpected '"+l+"'")}()}},function(e,t){var n;return c=e+"",s=0,l=" ",n=u(),y(),l&&f("Syntax error"),"function"==typeof t?function e(n,r){var i,o=n[r];return o&&"object"==typeof o&&Object.keys(o).forEach((function(t){void 0!==(i=e(o,t))?o[t]=i:delete o[t]})),t.call(n,r,o)}({"":n},""):n}}},123:(e,t,n)=>{var r=n(431),i=e.exports;!function(){"use strict";var e,t,n,o=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,s={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function l(e){return o.lastIndex=0,o.test(e)?'"'+e.replace(o,(function(e){var t=s[e];return"string"==typeof t?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+e+'"'}function c(i,o){var s,u,a,f,h,p=e,d=o[i],y=null!=d&&(d instanceof r||r.isBigNumber(d));switch(d&&"object"==typeof d&&"function"==typeof d.toJSON&&(d=d.toJSON(i)),"function"==typeof n&&(d=n.call(o,i,d)),typeof d){case"string":return y?d:l(d);case"number":return isFinite(d)?String(d):"null";case"boolean":case"null":case"bigint":return String(d);case"object":if(!d)return"null";if(e+=t,h=[],"[object Array]"===Object.prototype.toString.apply(d)){for(f=d.length,s=0;s<f;s+=1)h[s]=c(s,d)||"null";return a=0===h.length?"[]":e?"[\n"+e+h.join(",\n"+e)+"\n"+p+"]":"["+h.join(",")+"]",e=p,a}if(n&&"object"==typeof n)for(f=n.length,s=0;s<f;s+=1)"string"==typeof n[s]&&(a=c(u=n[s],d))&&h.push(l(u)+(e?": ":":")+a);else Object.keys(d).forEach((function(t){var n=c(t,d);n&&h.push(l(t)+(e?": ":":")+n)}));return a=0===h.length?"{}":e?"{\n"+e+h.join(",\n"+e)+"\n"+p+"}":"{"+h.join(",")+"}",e=p,a}}"function"!=typeof i.stringify&&(i.stringify=function(r,i,o){var s;if(e="",t="","number"==typeof o)for(s=0;s<o;s+=1)t+=" ";else"string"==typeof o&&(t=o);if(n=i,i&&"function"!=typeof i&&("object"!=typeof i||"number"!=typeof i.length))throw new Error("JSON.stringify");return c("",{"":r})})}()}},c={};function u(e){var t=c[e];if(void 0!==t)return t.exports;var n=c[e]={id:e,loaded:!1,exports:{}};return l[e].call(n.exports,n,n.exports,u),n.loaded=!0,n.exports}u.m=l,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},r=e=>!--e.r&&e(),i=(e,t)=>e?e.push(t):r(t),u.a=(o,s,l)=>{var c,u,a,f=l&&[],h=o.exports,p=!0,d=!1,y=(t,n,r)=>{d||(d=!0,n.r+=t.length,t.map(((t,i)=>t[e](n,r))),d=!1)},g=new Promise(((e,t)=>{a=t,u=()=>(e(h),n(f),f=0)}));g[t]=h,g[e]=(e,t)=>{if(p)return r(e);c&&y(c,e,t),i(f,e),g.catch(t)},o.exports=g,s((o=>{if(!o)return u();var s,l;c=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[e])return o;if(o.then){var s=[];o.then((e=>{l[t]=e,n(s),s=0}));var l={};return l[e]=(e,t)=>(i(s,e),o.catch(t)),l}}var c={};return c[e]=e=>r(e),c[t]=o,c})))(o);var a=new Promise(((e,n)=>{(s=()=>e(l=c.map((e=>e[t])))).r=0,y(c,s,n)}));return s.r?a:l})).then(u,a),p=!1},u.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return u.d(t,{a:t}),t},u.d=(e,t)=>{for(var n in t)u.o(t,n)&&!u.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},u.f={},u.e=e=>Promise.all(Object.keys(u.f).reduce(((t,n)=>(u.f[n](e,t),t)),[])),u.u=e=>e+".js",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},s="othello:",u.l=(e,t,n,r)=>{if(o[e])o[e].push(t);else{var i,l;if(void 0!==n)for(var c=document.getElementsByTagName("script"),a=0;a<c.length;a++){var f=c[a];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==s+n){i=f;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,u.nc&&i.setAttribute("nonce",u.nc),i.setAttribute("data-webpack",s+n),i.src=e),o[e]=[t];var h=(t,n)=>{i.onerror=i.onload=null,clearTimeout(p);var r=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=h.bind(null,i.onerror),i.onload=h.bind(null,i.onload),l&&document.head.appendChild(i)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var t=u.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),(()=>{var e={826:0};u.f.j=(t,n)=>{var r=u.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise(((n,i)=>r=e[t]=[n,i]));n.push(r[2]=i);var o=u.p+u.u(t),s=new Error;u.l(o,(n=>{if(u.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",s.name="ChunkLoadError",s.type=i,s.request=o,r[1](s)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;for(r in s)u.o(s,r)&&(u.m[r]=s[r]);for(l&&l(u),t&&t(n);c<o.length;c++)i=o[c],u.o(e,i)&&e[i]&&e[i][0](),e[o[c]]=0},n=self.webpackChunkothello=self.webpackChunkothello||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),u.v=(e,t,n,r)=>{var i=fetch(u.p+""+n+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(i,r).then((t=>Object.assign(e,t.instance.exports))):i.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,r))).then((t=>Object.assign(e,t.instance.exports)))},(()=>{"use strict";function e(){const e=new Array(8);for(let t=0;t<8;t++)e[t]=new Array(8).fill(!1);e[4][3]=!0,e[3][4]=!0;const t=new Array(8);for(let e=0;e<8;e++)t[e]=new Array(8).fill(!1);return t[3][3]=!0,t[4][4]=!0,{black:e,white:t,black_turn:!0}}function t(e){let t=0,n=0;return e.black.forEach(((e,n)=>{e.forEach(((e,n)=>{e&&t++}))})),e.white.forEach(((e,t)=>{e.forEach(((e,t)=>{e&&n++}))})),[t,n]}function n(e,t,n){const r=e[0],i=e[1];return r>=0&&r<=7&&i>=0&&i<=7&&!n.black[r][i]&&!n.white[r][i]&&(t?n.black[r][i]=!0:n.white[r][i]=!0,!0)}function r(e,t){const n=e[0],r=e[1];return n>=0&&n<=7&&r>=0&&r<=7&&!(!t.black[n][r]&&!t.white[n][r])&&(t.black[n][r]=!t.black[n][r],t.white[n][r]=!t.white[n][r],!0)}function i(e){return e.black_turn=!e.black_turn,e}function o(e,t){const n=[0,0];return n[0]=e[0]+t[0],n[1]=e[1]+t[1],n}const s={up:[-1,0],down:[1,0],left:[0,-1],right:[0,1],ul:[-1,-1],ur:[-1,1],dl:[1,-1],dr:[1,1]};function l(e,t,n){let r=[],i=o(e,t);if(n.black_turn){let e=n.white[i[0]];if(null==e||!e[i[1]])return[];for(;null!=e&&e[i[1]];)r.push(i),i=o(i,t),e=n.white[i[0]];let s=n.black[i[0]];return null!=s&&s[i[1]]?r:[]}{let e=n.black[i[0]];if(null==e||!e[i[1]])return[];for(;null!=e&&e[i[1]];)r.push(i),i=o(i,t),e=n.black[i[0]];let s=n.white[i[0]];return null!=s&&s[i[1]]?r:[]}}function c(e,t){let n=0;const r=t.white[e[0]],i=t.black[e[0]];if(null==i||i[e[1]]||null==r||r[e[1]])return!1;for(const r in s)l(e,Reflect.get(s,r),t).length>0&&n++;return n>0}function a(e){const t=[];for(let n=0;n<8;n++)for(let r=0;r<8;r++)c([n,r],e)&&t.push([n,r]);return t}function f(e,t){let n=[];for(const r in s){const i=Reflect.get(s,r);n=n.concat(l(e,i,t))}return n}var h,p;function d(e,t){const o=b(e);if(c(t,o)&&n(t,o.black_turn,o)){const e=f(t,o);for(const t of e)r(t,o);if(i(o),a(o).length>0)return[o,h.Ok];if(0===a(o).length)return i(o),0===a(o).length?(i(o),[o,h.End]):[o,h.Pass]}return[o,h.Error]}function y(e,t){const o=b(e);if(c(t,o)&&n(t,o.black_turn,o)){const e=f(t,o);for(const t of e)r(t,o);return i(o),o}return i(o),o}function g(e){return e.map((e=>[...e]))}function b(e){return{...e,black:g(e.black),white:g(e.white)}}function _(e,t,n){return[e*(n.height/100),t*(n.width/100)]}function m(e,t){return e*(t.height/100)}function w(e,t,n,r){const i=n.getContext("2d"),[o,s]=_(6.25+100*t/8,6.25+100*e/8,n),l=m(5,n);null!=i&&(i.strokeStyle="gray",i.lineWidth=2,i.fillStyle=!0===r?"black":"white",i.beginPath(),i.arc(o,s,l,0,2*Math.PI,!1),i.fill(),i.stroke())}function v(e,t){const n=t.getContext("2d"),r=[document.body.clientWidth,window.innerHeight-100,600].reduce(((e,t)=>Math.min(e,t)));t.height=r,t.width=r,null!=n&&n.clearRect(..._(0,0,t),..._(100,100,t)),function(e){const t=e.getContext("2d");let[n,r]=_(0,0,e),i=m(100,e);if(null!=t){t.fillStyle="green",t.fillRect(n,r,i,i),t.strokeStyle="gray",t.lineWidth=2;for(let e=0;e<9;e++)t.beginPath(),t.moveTo(n+i/8*e,r),t.lineTo(n+i/8*e,r+i),t.stroke();t.strokeStyle="gray",t.lineWidth=2;for(let e=0;e<9;e++)t.beginPath(),t.moveTo(n,r+i/8*e),t.lineTo(n+i,r+i/8*e),t.stroke()}}(t),function(e,t){for(let n=0;n<8;n++)for(let r=0;r<8;r++)e.black[n][r]?w(n,r,t,!0):e.white[n][r]&&w(n,r,t,!1)}(e,t),a(e).forEach((function(e){!function(e,t,n){const r=n.getContext("2d"),[i,o]=_(6.25+100*t/8,6.25+100*e/8,n),s=m(2,n);null!=r&&(r.strokeStyle="gray",r.lineWidth=2,r.fillStyle="gray",r.beginPath(),r.arc(i,o,s,0,2*Math.PI,!1),r.fill(),r.stroke())}(e[0],e[1],t)}))}function A(){return{next_move:e=>{const t=a(e),n=t[Math.floor(Math.random()*t.length)];return void 0!==n?n:[-1,-1]}}}function E(e){return k(e,6,1e8,-1e8,x)[1]}function k(e,t,n,r,o){if(t<=1)return o(e);{const s=a(e);let l=-1e8,c=[0,0];if(a(e).length<=0){const s=b(e);return i(s),k(s,t-1,-r,-n,o)}for(const r of s){const i=k(y(b(e),r),t-1,-l,-n,o);if(-i[0]>=n)return[-i[0],r];-i[0]>l&&([l,c]=[-i[0],r])}return[l,c]}}function x(e){const n=e.black_turn,[r,i]=t(e);return n?[r,[0,0]]:[i,[0,0]]}function I(e){return[a(e).length,[0,0]]}function O(e){return k(e,5,1e8,-1e8,I)[1]}(p=h||(h={}))[p.Ok=0]="Ok",p[p.Pass=1]="Pass",p[p.End=2]="End",p[p.Error=3]="Error";const N=[[200,-50,40,5,5,40,-50,200],[-50,-90,-10,-5,-5,-10,-90,-50],[40,-10,-2,-2,-2,-2,-10,40],[5,-5,-2,1,1,-2,-5,5],[5,-5,-2,1,1,-2,-5,5],[40,-10,-2,-2,-2,-2,-10,40],[-50,-90,-10,-5,-5,-10,-90,-50],[200,-50,40,5,5,40,-50,200]];function S(e){const t=e.black_turn;let n=0,r=0;return e.black.forEach(((e,t)=>{e.forEach(((e,r)=>{e&&(n+=N[t][r])}))})),e.white.forEach(((e,t)=>{e.forEach(((e,n)=>{e&&(r+=N[t][n])}))})),t?[n-r,[0,0]]:[r-n,[0,0]]}function B(e){return k(e,6,1e8,-1e8,S)[1]}var P=u(400),j=u.n(P);async function T(e){return"CP1"===e?A():"CP2"===e?{next_move:E}:"CP3"===e?{next_move:O}:"CP4"===e?{next_move:B}:"CP5"===e?await async function(){const e=await u.e(235).then(u.bind(u,235)).then((e=>e));return e.init(),{next_move:t=>JSON.parse(e.next_move(function(e){const t=0x8000000000000000n;let n,r=0x0000000000000000n,i=0x0000000000000000n;for(let n=0;n<64;n++){const o=n/8|0,s=n%8;e.black[o][s]&&(r|=t>>BigInt(n)),e.white[o][s]&&(i|=t>>BigInt(n))}return n=e.black_turn?{player:r,opponent:i,is_player_black:!0}:{player:i,opponent:r,is_player_black:!1},j().stringify(n)}(t)))}}():A()}function C(t,n,r,i,o,s,l,c,u,a,f,p){const d={last:performance.now(),interval:1e3/60,board:e(),canvas:t,user_input:null,message_holder:n,start_button:r,cancel_button:i,select_black:o,select_white:s,select_AIbattle:l,first_AIselect_box:c,first_AIselect_form:u,second_AIselect_box:a,second_AIselect_form:f,fix_AI:p,now_gaming:!1,black_player:"user",white_player:"user",board_history:[[e(),h.Ok]],turn_number:0};return n.innerText="å¯¾æ¦ç¸æãåæ»å¾æ»ãé¸ãã§ãã ããã",d.start_button.style.display="inline",d.select_black.style.display="inline",d.select_white.style.display="inline",d.select_AIbattle.style.display="inline",function(e){e.canvas.addEventListener("click",(t=>{const n=e.canvas.getBoundingClientRect(),r=t.clientX-n.left,i=t.clientY-n.top,[o,s]=function(e,t){const n=[e[0]/t.height*100,e[1]/t.width*100];return[Math.round((n[0]-6.75)/12.5),Math.round((n[1]-6.75)/12.5)]}([r,i],e.canvas);e.user_input=[s,o]}))}(d),function(t,n,r,i,o,s,l,c,u,a,f){n.addEventListener("click",(n=>{t.now_gaming=!0,t.start_button.style.display="none",t.select_black.style.display="none",t.select_white.style.display="none",t.select_AIbattle.style.display="none",t.cancel_button.style.display="inline",t.board=e(),v(t.board,t.canvas),t.black_player="user",t.white_player="user",t.message_holder.innerText="ãäºãé å¼µã£ã¦ãã ããã\né»ã®æçªã§ãã"})),i.addEventListener("click",(n=>{t.start_button.style.display="none",t.select_black.style.display="none",t.select_white.style.display="none",t.select_AIbattle.style.display="none",t.cancel_button.style.display="none",t.fix_AI.style.display="inline",t.second_AIselect_form.style.display="inline",f.addEventListener("click",(async n=>{t.now_gaming=!0,t.cancel_button.style.display="inline",t.second_AIselect_form.style.display="none",t.fix_AI.style.display="none",t.board=e(),v(t.board,t.canvas),t.black_player="user",t.white_player=await T(u.value),t.message_holder.innerText="ããã²ã¼ã ãå§ãã¾ãããã\nããªã(é»)ã®æçªã§ãã"}))})),o.addEventListener("click",(n=>{t.start_button.style.display="none",t.select_black.style.display="none",t.select_white.style.display="none",t.select_AIbattle.style.display="none",t.cancel_button.style.display="none",t.fix_AI.style.display="inline",t.first_AIselect_form.style.display="inline",f.addEventListener("click",(async n=>{t.now_gaming=!0,t.cancel_button.style.display="inline",t.first_AIselect_form.style.display="none",t.fix_AI.style.display="none",t.board=e(),v(t.board,t.canvas),t.black_player=await T(l.value),t.white_player="user",t.message_holder.innerText="é»ã®æçªã§ãã"}))})),s.addEventListener("click",(n=>{t.start_button.style.display="none",t.select_black.style.display="none",t.select_white.style.display="none",t.select_AIbattle.style.display="none",t.cancel_button.style.display="none",t.fix_AI.style.display="inline",t.first_AIselect_form.style.display="inline",t.second_AIselect_form.style.display="inline",f.addEventListener("click",(async n=>{t.now_gaming=!0,t.cancel_button.style.display="inline",t.first_AIselect_form.style.display="none",t.second_AIselect_form.style.display="none",t.fix_AI.style.display="none",t.board=e(),v(t.board,t.canvas),t.black_player=await T(l.value),t.white_player=await T(u.value),t.message_holder.innerText="é»ã®æçªã§ãã"}))}))}(d,d.start_button,d.cancel_button,d.select_black,d.select_white,d.select_AIbattle,d.first_AIselect_box,d.first_AIselect_form,d.second_AIselect_box,d.second_AIselect_form,d.fix_AI),d}function L(e){if(!e.now_gaming&&null!==e.user_input)return e.user_input=null,!1;if(e.now_gaming&&null!==e.user_input){e.turn_number=function(e,t,n){const r=e[t][0];!function(e,t){if(e.length>1){const n=e.length-t-1;for(let t=0;t<n;t++)e.pop()}}(e,t);const[i,o]=d(r,n);return e.push([i,o]),t+1}(e.board_history,e.turn_number,e.user_input);const[t,n]=d(e.board,e.user_input);return e.user_input=null,e.board=t,n!==h.Error&&(n===h.End?(e.message_holder.innerText=R(e,n),e.now_gaming=!1,e.start_button.style.display="inline",e.select_black.style.display="inline",e.select_white.style.display="inline",e.select_AIbattle.style.display="inline",!0):(e.message_holder.innerText=R(e,n),!0))}return!1}function M(e){(function(e){return e.board.black_turn?("user"===e.black_player||(e.user_input=e.black_player.next_move(e.board)),L(e)):!e.board.black_turn&&("user"===e.white_player||(e.user_input=e.white_player.next_move(e.board)),L(e))})(e)&&v(e.board,e.canvas)}function R(e,n){const r=e.board,i="é»ï¼ "+t(r)[0]+"\nç½ï¼ "+t(r)[1]+"\n";if(n===h.Ok)return r.black_turn?i+"é»ã®æçªã§ã":i+"ç½ã®æçªã§ã";if(n===h.Error)return r.black_turn?i+"ããã«ã¯ç½®ããã¨ãã§ãã¾ãããé»ã®æçªã§ãã":i+"ããã«ã¯ç½®ããã¨ãã§ãã¾ãããç½ã®æçªã§ãã";if(n===h.Pass)return r.black_turn?i+"ç½ã¯ç½®ãã¨ããããªãã®ã§ãã¹ã§ããååº¦é»ã®æçªã§ãã":i+"é»ã¯ç½®ãã¨ããããªãã®ã§ãã¹ã§ããååº¦ç½ã®æçªã§ãã";if(n===h.End){if(t(r)[0]>t(r)[1])return i+"ã²ã¼ã çµäºã§ãã\né»ã®åã¡ã§ãã\nååº¦ã²ã¼ã ãéå§ããã«ã¯ãã¿ã³ãæ¼ãã¦ãã ããã";if(t(r)[0]<t(r)[1])return i+"ã²ã¼ã çµäºã§ãã\nç½ã®åã¡ã§ãã\nååº¦ã²ã¼ã ãéå§ããã«ã¯ãã¿ã³ãæ¼ãã¦ãã ããã";if(t(r)[0]=t(r)[1])return i+"ã²ã¼ã çµäºã§ãã\nå¼ãåãã§ãã\nååº¦ã²ã¼ã ãéå§ããã«ã¯ãã¿ã³ãæ¼ãã¦ãã ããã"}return"ãã°"}(()=>{const e=document.getElementById("canvas"),t=document.getElementById("message"),n=document.getElementById("start_button"),r=document.getElementById("cancel_button"),i=document.getElementById("select_black"),o=document.getElementById("select_white"),s=document.getElementById("select_AIbattle"),l=document.getElementById("first_AIselect_form"),c=document.getElementById("second_AIselect_form"),u=document.getElementById("first_AIselect_box"),a=document.getElementById("second_AIselect_box"),f=document.getElementById("fix_AI");r.style.display="none",f.style.display="none",l.style.display="none",c.style.display="none";const p=C(e,t,n,r,i,o,s,u,l,a,c,f);(function(e,t){t.addEventListener("click",(t=>{e.turn_number=function(e,t){if(t>1){const n=e[t][0].black_turn;let r=b(e[--t][0]);for(;n!==r.black_turn;)r=b(e[--t][0]);return t}return t}(e.board_history,e.turn_number);const n=e.board_history[e.turn_number][0];e.board=n,e.now_gaming=!0,e.start_button.style.display="none",e.select_black.style.display="none",e.select_white.style.display="none",e.select_AIbattle.style.display="none",e.message_holder.innerText=R(e,h.Ok),v(e.board,e.canvas)}))})(p,p.cancel_button),v(p.board,e),function(e,t){const n=t=>{let r=t-e.last;for(;r>=e.interval;)r-=e.interval,e.last=t-r,M(e);requestAnimationFrame(n)};requestAnimationFrame(n)}(p)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,